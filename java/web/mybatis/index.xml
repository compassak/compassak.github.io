<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mybatis on en</title>
    <link>https://compass-ak.gitee.io/java/web/mybatis/</link>
    <description>Recent content in Mybatis on en</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jul 2019 22:39:56 +0800</lastBuildDate>
    
	<atom:link href="https://compass-ak.gitee.io/java/web/mybatis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1. Mybatis工作原理</title>
      <link>https://compass-ak.gitee.io/java/web/mybatis/mybatis%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 15 Sep 2019 17:02:15 +0800</pubDate>
      
      <guid>https://compass-ak.gitee.io/java/web/mybatis/mybatis%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>1. Mybatis 简介 MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。
2. Mybatis工作原理 Mybatis 是一个Java框架，它的工作过程中一定包含了许多对象的构造和销毁，对象是面向对象编程的最重要的机制。了解 Mybatis 框架中的一些关键对象如何构造产生以及销毁，就相当于理解了 Mybatis 的工作原理。Mybatis工作原理可以用如下流程图进行说明。
图中步骤流程说明：
 1.读取 mybatis-config.xml 配置文件：mybatis-config.xml 为 Mybatis 的全局配置文件，文件中包含了对 MyBatis 系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务作用域和控制方式的事务管理器（TransactionManager）。
 2.加载映射器文件：映射器文件即Sql映射器文件，该文件中配置了操作数据库的Sql语句，需要在Mybatis配置文件 mybatis-config.xml 文件中声明加载。mybatis-config.xml 文件可以加载多个映射文件，每个映射文件一般对应数据库的一张数据表。
 3.构造会话工厂对象：Mybatis根据其核心配置信息构建 SqlSessionFactory 对象。SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次。
 4.构造会话对象：SqlSession 会话对象由 SqlSessionFactory 会话工厂对象创建，该对象包含执行SQL语句的所有方法。SqlSession 的实例不是线程安全的， 每个线程都应该有它自己的 SqlSession 实例。
 5.Executor 执行器：Mybatis 底层定义了一个 Executor 接口来操作数据库， 它根据 SqlSession 对象传递的参数动态的生成需要执行的 Sql 语句，同时负责查询缓存的维护。</description>
    </item>
    
    <item>
      <title>2. Mybatis映射器1</title>
      <link>https://compass-ak.gitee.io/java/web/mybatis/mybatis%E6%98%A0%E5%B0%84%E5%99%A81/</link>
      <pubDate>Mon, 16 Sep 2019 17:02:15 +0800</pubDate>
      
      <guid>https://compass-ak.gitee.io/java/web/mybatis/mybatis%E6%98%A0%E5%B0%84%E5%99%A81/</guid>
      <description>一. Mybatis配置文件概述 Mybatis核心配置文件 mybatis-config.xml 配置了很多影响Mybatis行为的信息，在一个项目内此文件不会轻易改动，而且在与 Spring 框架整合后 Mybatis 核心配置文件信息将配置到 Spring 的配置文件中。我们平时应用只需基础的了解一下常用的配置。
mybatis-config.xml 常用配置模板代码如下：
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt; &amp;lt;!DOCTYPE configuration PUBLIC &amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot; &amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;propertises/&amp;gt; &amp;lt;!-- 属性 --&amp;gt; &amp;lt;settings&amp;gt; &amp;lt;!-- 设置 --&amp;gt; &amp;lt;setting name=&amp;quot;&amp;quot; value=&amp;quot;&amp;quot; /&amp;gt; &amp;lt;/settings&amp;gt; &amp;lt;typeAliases /&amp;gt; &amp;lt;!-- 类型别名 --&amp;gt; &amp;lt;typeHandlers&amp;gt;&amp;lt;/typeHandlers&amp;gt; &amp;lt;!-- 类型处理器 --&amp;gt; &amp;lt;objectFactory type=&amp;quot;&amp;quot;&amp;gt; &amp;lt;!-- 对象工厂 --&amp;gt; &amp;lt;property name=&amp;quot;&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt; &amp;lt;/objectFactory&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin interceptor=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/plugin&amp;gt; &amp;lt;!-- 插件 --&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;environments default=&amp;quot;development&amp;quot;&amp;gt; &amp;lt;!-- 配置环境 --&amp;gt; &amp;lt;environment id=&amp;quot;development&amp;quot;&amp;gt; &amp;lt;transactionManager type=&amp;quot;JDBC&amp;quot;/&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>3. Mybatis映射器2</title>
      <link>https://compass-ak.gitee.io/java/web/mybatis/mybatis%E6%98%A0%E5%B0%84%E5%99%A82/</link>
      <pubDate>Tue, 17 Sep 2019 17:02:15 +0800</pubDate>
      
      <guid>https://compass-ak.gitee.io/java/web/mybatis/mybatis%E6%98%A0%E5%B0%84%E5%99%A82/</guid>
      <description>Mybatis 映射器中除了实现增删改查的四大标签元素，还有一些辅助的标签元素来让程序更好更便捷的与数据库交互。分别为：, , , 。其中 resultMap是映射器中最重要最强大的的标签元素，需要多一些的篇幅来记录它，这篇博客先记录其他的三个元素。
1. &amp;lt;sql&amp;gt;元素  标签元素可以用来定义一段 Sql 代码段，这些代码可以被包含在其他标签元素内的 Sql 语句中。更重要的是，它可以在加载时被静态的设置参数，在被不同的语句包含时可以设置不同的参数到参数占位符上。例如：
&amp;lt;sql id=&amp;quot;userColumns&amp;quot;&amp;gt; ${user}.id,${user}.username,${user}.password &amp;lt;/sql&amp;gt; &amp;lt;/sql&amp;gt;  #{ }是预编译处理，MyBatis在处理#{ }时，它会将sql中的#{ }替换为？，然后调用PreparedStatement的set方法来赋值；\${ }是字符串替换， MyBatis在处理\${ }时,它会将sql中的\${ }替换为变量的值。使用${ }可能会导致sql注入，不利于系统的安全性！
这样声明后这个 Sql 语句就可以就可以被包含在其他标签下的 Sql 语句中了。例如：
&amp;lt;select id=&amp;quot;selectUsers&amp;quot; resultType=&amp;quot;map&amp;quot;&amp;gt; select &amp;lt;include refid=&amp;quot;userColumns&amp;quot;&amp;gt;&amp;lt;property name=&amp;quot;user&amp;quot; value=&amp;quot;u1&amp;quot;/&amp;gt;&amp;lt;/include&amp;gt;, &amp;lt;include refid=&amp;quot;userColumns&amp;quot;&amp;gt;&amp;lt;property name=&amp;quot;user&amp;quot; value=&amp;quot;u2&amp;quot;/&amp;gt;&amp;lt;/include&amp;gt; from some_table u1 cross join some_table u2 &amp;lt;/select&amp;gt;  2. 缓存元素 Mybatis 内置了一个强大的事务查询缓存机制，可以非常方便的配置和定制。在默认情况下，Mybatis 只启用了本地的会话缓存，仅对一个会话中的数据进行缓存。若需要启用全局二级缓存，只需要在映射器文件中添加一行：
&amp;lt;cache/&amp;gt;  添加这一个标签元素后，会起到如下效果：
 映射语句文件中的所有 select 语句的结果将会被缓存。 映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。 缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。 缓存不会定时进行刷新（也就是说，没有刷新间隔）。 缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。 缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。  缓存只作用于 cache 标签所在的映射文件中的语句。如果你混合使用 Java API 和 XML 映射文件，在共用接口中的语句将不会被默认缓存。你需要使用 @CacheNamespaceRef 注解指定缓存作用域。</description>
    </item>
    
    <item>
      <title>4. Mybatis映射器3</title>
      <link>https://compass-ak.gitee.io/java/web/mybatis/mybatis%E6%98%A0%E5%B0%84%E5%99%A83/</link>
      <pubDate>Wed, 18 Sep 2019 17:02:15 +0800</pubDate>
      
      <guid>https://compass-ak.gitee.io/java/web/mybatis/mybatis%E6%98%A0%E5%B0%84%E5%99%A83/</guid>
      <description>关于 Mybatis 映射器文件的知识点还差一个标签元素，是Mybatis 中最强大的元素，它可以让你从 90% 的 JDBC ResultSets 数据提取代码中解放出来，并在一些情形下允许你进行一些 JDBC 不支持的操作。resultMap的作用就是提供一系列，指定数据库列名与 javaBean 属性名映射关系的方法。涉及的知识点较多，需要用一整篇博客去记录它。
1. 隐式结果映射(自动映射) 实际上，如果你用 mybatis 开发过小型的项目，你可能没有显示的用到 元素，但是你很有可能隐式的用了它。这正是ResultMap的设计思想，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。就像下面这个例子：
 javaBean:
package com.example.model; public class User { private int uid; private String username; private String password;   你只需要在映射器文件中写下如下&amp;lt;select&amp;gt;元素，然后使用你就可以获得一个内涵 User 对象的 List 集合。(前提是数据库列名能与 javaBean 属性一 一对应)
 &amp;lt;select&amp;gt;标签元素内容
&amp;lt;select id=&amp;quot;selectUsers&amp;quot; resultType=&amp;quot;com.example.model.User&amp;quot;&amp;gt; select uid, username, password from user where id = #{id} &amp;lt;/select&amp;gt;   在这个获取User对象List集合的过程中，Mybatis 会幕后的创建一个 ResultMap 类对象，在根据属性名将是数据列映射到 javaBean 的属性上。如果列名和属性名不能一 一对应，可以在 SELECT 语句中对列使用别名，亦可以使列于属性相匹配，比如：</description>
    </item>
    
    <item>
      <title>5. Mybatis动态sql</title>
      <link>https://compass-ak.gitee.io/java/web/mybatis/mybatis%E5%8A%A8%E6%80%81sql/</link>
      <pubDate>Wed, 18 Sep 2019 17:02:15 +0800</pubDate>
      
      <guid>https://compass-ak.gitee.io/java/web/mybatis/mybatis%E5%8A%A8%E6%80%81sql/</guid>
      <description>MyBatis 的强大特性之一便是它的动态 SQL。简化了许多我们原本需要在JDBC编程中的一些操作，动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。Mybatis动态SQL需要用到的标签元素有：
 if choose (when, otherwise) trim (where, set) foreach  1. if 元素 例子：
&amp;lt;select id=&amp;quot;selectAllOrderByTotal&amp;quot; resultType=&amp;quot;bean.Student&amp;quot; parameterType=&amp;quot;bean.StudentExample&amp;quot;&amp;gt; select st.*,sc.javaee,sc.android,sc.s_sql,sc.total from student st,score sc where st.snum=sc.snum &amp;lt;if test=&amp;quot;asc&amp;quot;&amp;gt; order by sc.total asc &amp;lt;/if&amp;gt; &amp;lt;if test=&amp;quot;!asc&amp;quot;&amp;gt; order by sc.total desc &amp;lt;/if&amp;gt; &amp;lt;/select&amp;gt;  在动态SQL中通常需要做的事情就是为查询添加约束条件，像上面的&amp;lt;select&amp;gt;元素就可以根据参数StudentExample 的 asc 属性的真假来判断是使用学生总分升序查询，还是学生总分降序查询。其中&amp;lt;if&amp;gt; 标签的 test 属性指定一个本判断的布尔表达式，实际效果与java或其他语言的if语句类似。相当于 test 指定if括号内的判断条件。
在使用多个并列&amp;lt;if&amp;gt;判断标签，且其包含的处理语句逻辑互斥时（比如上面的升序，降序的查询处理），需要注意的是一定要保证 test判断条件时互斥的。不然最后执行的SQL语句可能会产生逻辑错误。</description>
    </item>
    
  </channel>
</rss>